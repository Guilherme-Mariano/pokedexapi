# .github/workflows/ci-cd.yml

name: CI/CD Pipeline para API de Santos

# Gatilhos: Define quando a pipeline deve rodar
on:
  # Roda sempre que um push for feito para a branch main
  push:
    branches: [ "pipeline-ci-cd" ]
  
  # Roda sempre que um pull request for aberto ou atualizado para a branch main
  pull_request:
    branches: [ "pipeline-ci-cd" ]

jobs:
  # --- Job de CI: Build e Teste ---
  build-and-test:
    name: Build, Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Instala dependências da aplicação e de teste (pytest, httpx)
          pip install -r requirements.txt
          # Instala o linter separadamente
          pip install flake8

      - name: Lint with Flake8
        run: |
          # Verifica o código por erros e estilo
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with Pytest
        # A MUDANÇA ESTÁ AQUI: Removemos a chamada para create_database.py
        # Nossos arquivos de teste agora gerenciam seu próprio banco de dados em memória.
        run: pytest

      - name: Build Docker image for testing
        run: docker build -t santos-api-test .

  # --- Job de CD: Publicar a Imagem Docker ---
  publish-docker-image:
    name: Publish Docker Image
    needs: build-and-test # SÓ RODA SE o job 'build-and-test' for bem-sucedido
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # E SÓ RODA em um push para a main

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}